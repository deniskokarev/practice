
= 1 =
Behavioral - Vinoth John

10y amazon
aws accounts

== a ==
trying to understand a complex in the team and tried to get into details

msptools/edrtools

why

perfectionist

== b ==

different prospecitvive to solve a problem

async disk nelos

POC

team structure

== c ==

enabled team member to implement significat improvement

kafka auth


= 2 =

Coding - Mohammad Quandeel


High-standard

2G limit edrtools


compromise the quality and deliver

deliver

zk

ambiguity

Prometheus


/**
 * Requirements:
 *   each row contains digits 1 to 9, each digit occurs only once
 *   each col contains digits 1 to 9, each digit occurs only once
 *   each sub-grid (3x3) contains digits 1 to 9, each digit occurs only once
 *
 * For example, here is a valid grid which should return true:
 *
 * int[][] sudokuGrid = {
 *        {5,3,4,6,7,8,9,1,2},
 *        {6,7,2,1,9,5,3,4,8},
 *        {1,9,8,3,4,2,5,6,7},
 *        {8,5,9,7,6,1,4,2,3},
 *        {4,2,6,8,5,3,7,9,1},
 *        {7,1,3,9,2,4,8,5,6},
 *        {9,6,1,5,3,7,2,8,4},
 *        {2,8,7,4,1,9,6,3,5},
 *        {3,4,5,2,8,6,1,7,9}
 **/
 
 
 // CPU = O(h*w)
 // Mem = O(max(h,w))
 // check 9x9 sudoku
 bool sudoku_check(const vector<vector<int>> &board) {
    vector<bitset<9>> rows(9);
    vector<bitset<9>> cols(9); // cols[i] = bits 0..8 in that col
    vector<vector<bitset<9>> quad(3, vector<bitset<9>>(3)); // quad[][] = bits 0..8
    for (int r=0; r<9; r++) {
        for (int c=0; c<9; c++) {
            int qr = r/3;
            int qc = c/3;
            if (board[r][c] < 0 || board[r][c] > 9)
                return false;
            rows[r][board[r][c]-1] = 1;
            cols[c][board[r][c]-1] = 1;
            quad[qr][qc][board[r][c]-1] = 1;
        }
    }
    bool ans = true;
    for (int i=0; i<9; i++) {
        ans &= rows[i].all();
        ans &= cols[i].all();
    }
    for (int qr=0; qr<3; qr++)
        for (int qc=0; qc<3; qc++)
            ans &= quad[qr][qc].all();
    return all;
 }




= 3 =

Data structures and algorithms - Josh Slider

took outside of role of responsibility

compliance

amex


influence a peer


Design a web crawler that fetches every page on en.wikipedia.org (http://en.wikipedia.org/).
You have 10,000 servers.
If a URL fails to be fetched (because of a timeout or server failure), it can be discarded.

deduped list of pages

// doc -> doc -> doc

report all pages

storage?

elk

1M

Disigng splain BFS traversal, using kafka as queue, MySQl as seen[], multiple download/parse nodes, mandatory cleanup process and Prometheus monitoring




= 4 =

Resposible for choosing technology for the project

zk vs kafka


operational event on production sustem


"mirror" a binary tree.

written dfs() quickly then couldn't find an alternative approach to use smaller stack, proposed modeliing dfs() with stack() and serialiazrion/de-serialization.
used bfs() after a hint()


= 5 =

Clean Code - David Yarborough

non-unticipoated obstacle and achieved a goal

zmq

took unpopular position

yoix, daytona


making an improvement and had to persist

jvisualvm for kafka to use java11 instead of java8



Amazon is releasing a new feature called, Stuff your friends are buying.  The
feature lists a set of products that you have not already purchased from the 
things that your friends have bought, in order of most purchased to least
purchased.
	
To help with this, you have the following two APIs:

	getFriends(person): Returns a list of friends of the person.
	
	getPurchases(person): Returns a list of purchases of the person. If purchased multiple times, item will be in the list multiple times.




Amazon is releasing a new feature called, Stuff your friends are buying.  The
feature lists a set of products that you have not already purchased from the 
things that your friends have bought, in order of most purchased to least
purchased.
	
To help with this, you have the following two APIs:

	getFriends(person): Returns a list of friends of the person.
	
	getPurchases(person): Returns a list of purchases of the person. If purchased multiple times, item will be in the list multiple times.

//int person;
//int purchase;

struct PurCnt {
    int pur_id;
    int cnt;
    bool operator<(const PurCnt &o) const {
        return cnt > o.cnt;
    }
};


class PurObs {
    virtual void handle_friends(int person_id) = 0;
};

class PurObsImpl {
    virtual void handle_friends(int person_id) override {
        
    }
};

class FriendsVisitor {
    int lvl;
    int me;
    PurObs &purVis;
    
    void do_visit_impl(int root, int level, unordered_set<int> &seen) {
        if (level && !seen[root]) {
            seen[root] = true;
            vis.handle_friends(root);
            for (int f:getFriends(root))
                do_visit_impl(f, level-1, seen);
        }
    }
public:
    FriendsVisitor(int me, int level, PurObs &vis):me(me),lvl(level),vis(vis) {
    
    }
    void do_visit() {
        unordered_set<int> &seen;
        do_visit_impl(me, lvl, vis);
    }
}

vector<int> getStuff(int me) {
    unorderd_map<int,int> friends_pur_cnt;
    for (int fr_id:getFriends(me))
        for (int pur_id:getPurchases(fr_id))
            pur_cnt[pur_id]++;
    vector<PurCnt> pur_srt;
    for (auto pc:pur_cnt)
        pur_srt.push_back({pc.first, pc.second});
    sort(pur_srt.begin(), pur_cnt.end());
    unordered_set<int> my_pur_ids;
    for (int pur_id:getPurchases(me))
        my_pur_ids.insert[pur_id];
    vector<int> res;
    for (PurCnt &pc:pur_srt)
        if (!my_pur_ids.count(pc.pur_id))
            res.push_back(pc.pur_id)
    return res;
}


= Feedback =

Personal impression: was tired in last 2 rounds, especially in last one. First 3 rounds were fine.

Mike Swift:

- Too many hints on Data Structures and Algorithms

- Clean Code too complicated

- LP Disagree and Commit (yoix story) not impressive 

- Coding, System Design and other LP stories ok

- Come back in few months
