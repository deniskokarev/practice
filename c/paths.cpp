#include <iostream>
#include <vector>

/*
 * binomial n!/(k!(n-k)!)
 */
uint64_t choose(int n, int k) {
	uint64_t r = 1;
	uint c = n-k+1;
	for (uint z=1; z<=k; z++,c++) {
		r *= c;
		r /= z;
	}
	return r;
}

/*
 * enumerate all manhattan paths on the square grid from point (0,0) to point (x,y)
 * the total number will be choose(x+y-2, min(x,y)-1)
 */
class PathChoose {
protected:
	int x, y;
	int runHlp(std::pair<int, int> path[], int ppos, int cx, int cy);
public:	
	PathChoose(int ax, int ay) : x(ax), y(ay) {}
	/* start invoking handleNext() callback every time with new path */
	int run();
	/* number of paths (number of times handleNext() will be invoked) */
	uint64_t num() { return choose(x+y-2, std::min(x, y)-1); }
	/* each of them is length len() */
	int len() { return x+y-1; }
protected:
	/* handle each path generated by run() */
	virtual int handleNext(const std::pair<int, int> path[]) = 0;
};

int PathChoose::runHlp(std::pair<int, int> path[], int ppos, int cx, int cy) {
	int rc;
	int p = ppos;
	if (cx < x-1) {
		for (int ay = cy; ay < y; ay++) {
			path[p++] = std::pair<int, int>(cx, ay);
			rc = runHlp(path, p, cx+1, ay);
			if (rc)
				return rc;
		}
	} else if (cx < x) {
		for (int ay = cy; ay < y; ay++)
			path[p++] = std::pair<int, int>(cx, ay);
		rc = handleNext(path);
		if (rc)
			return rc;
	} else {
		rc = handleNext(path);
		if (rc)
			return rc;
	}
	return 0;
}

int PathChoose::run() {
	std::unique_ptr<std::pair<int, int>[] > path(new std::pair<int, int>[x+y-1]);
	return runHlp(path.get(), 0, 0, 0);
}

class PrnPathChoose : public PathChoose {
protected:
	virtual int handleNext(const std::pair<int, int> path[]) override {
		auto p = &path[0];;
		for (int i=0; i<len()-1; ++i,++p)
			std::cout << "[" << p->first << ", " << p->second << "], ";
		std::cout << "[" << p->first << ", " << p->second << "]" << std::endl;
		return 0;
	}
public:
	PrnPathChoose(int ax, int ay):PathChoose(ax, ay) {
	}
};


int main(int argc, char **argv) {
	PrnPathChoose ppc(5, 5);
	std::cerr << "You should be seen " << ppc.num() << " paths" << std::endl;
	ppc.run();
	return 0;
}
