#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
/* https://leetcode.com/contest/biweekly-contest-9/problems/how-many-apples-can-you-put-into-the-basket/ */
using namespace std;

class Solution {
public:
    static int maxNumberOfApples(const vector<int>& arr) {
		vector<vector<int>> dd(arr.size()+1, vector<int>(5001));
		for (int i=0; i<arr.size(); i++) {
			for (int w=0; w<5001; w++) {
				dd[i+1][w] = dd[i][w];
				if (w-arr[i] >= 0)
					dd[i+1][w] = max(dd[i+1][w], dd[i][w-arr[i]]+1);
			}
		}
		return dd[arr.size()][5000];
    }
};

int main(int argc, char **argv) {
	cout << Solution::maxNumberOfApples({100,200,150,1000}) << endl;
	cout << Solution::maxNumberOfApples({900,950,800,1000,700,800}) << endl;
	vector<int> in1 {831,430,380,386,943,86,643,420,416,690,97,634,367,752,747,854,937,143,852,946,533,798,900,156,123,515,530,667,141,903,909,901,803,967,239,464,869,407,278,222,280,385,17,94,908,657,624,674,69,985,541,515,692,572,909,925,96,397,996,420,132,31,239,122,418,418,170,609,304,362,985,337,170,742,413,724,426,781,521,434,412,407,50,919,451,406,860,554,115,866,523,905,659,515,241,698,760,633,99,444,495,218,604,560,452,685,847,218,726,932,634,668,66,541,401,405,771,507,243,771,584,728,20,65,128,42,447,298,18,348,579,127,215,338,723,527,910,602,317,729,927,762,449,610,121,536,54,89,26,418,234,624,134,396,37,64,414,884,809,233,792,130,565,636,634,724,582,835,261,1,802,226,319,333,818,961,146,982,646,422,497,58,335,218,885,107,291,999,185,320,796,303,501,664,375,328,450,429,185,131,468,699,872,604,616,430,824,584,161,968,914,858,192,645,188,336,99,103,675,87,418,973,483,409,224,240,823,865,515,685,92,739,38,508,491,578,575,51,863,653,926,178,817,801,784,76,437,420,69,328,343,332,462,38,484,333,94,419,986,169,140,755,208,790,280,400,834,535,62,277,524,880,445,458,422,689,495,588,179,630,377,680,735,126,920,535,245,786,707,403,982,566,485,923,806,703,923,223,386,237,303,881,582,186,173,7,86,706,247,260,181,260,192,615,706,193,639,260,854,945,291,192,853,578,414,834,804,501,287,678,517,980,112,740,343,565,627,583,842,509,51,253,215,347,93,27,759,762,934,764,315,546,142,513,497,785,850,219,585,365,103,993,400,448,393,998,56,53,206,762,114,293,882,140,683,447,522,532,374,671,469,351,350,354,117,432,425,591,556,358,686,434,368,950,412,776,371,313,47,820,702,489,423,64,494,817,762,444,215,610,109,105,437,826,9,193,791,344,114,948,713,268,232,290,330,429,234,697,65,520,358,686,488,888,644,659,710,436,468,813,139,475,54,212,97,483,325,6,233,574,420,756,502,828,250,959,665,375,189,593,31,638,944,379,807,146,798,515,730,912,534,447,94,475,347,373,927,135,803,88,774,76,396,712,965,167,546,290,686,514,856,86,590,317,557,6,23,251,504,6,815,651,398,676,463,159,986,147,60,108,700,177,391,837,178,512,595,839,389,932,955,838,224,83,582,517,143,741,689,614,427,769,650,184,113,711,625,174,451,675,71,880,887,418,524,643,872,257,387,937,972,543,537,677,75,677,470,633,179,135,289,270,284,120,464,110,433,79,682,998,258,501,571,626,487,404,656,185,214,677,669,62,689,382,409,487,29,970,27,410,918,311,910,51,541,926,970,673,282,401,629,929,835,532,511,910,719,456,948,479,884,440,587,522,4,576,453,846,729,626,105,532,639,658,483,460,951,23,352,169,452,742,496,46,141,918,713,89,572,384,344,374,225,568,641,338,17,525,922,279,232,55,83,556,654,139,655,775,4,187,518,980,266,472,580,103,2,547,223,86,661,710,899,8,534,638,592,258,61,963,912,225,589,320,24,905,327,102,704,207,865,105,486,475,345,560,846,475,464,240,254,716,438,964,347,742,135,469,857,201,954,380,198,255,571,815,524,706,881,379,327,690,860,255,111,561,709,890,413,833,764,562,460,943,474,615,124,918,878,29,229,329,747,584,82,959,712,620,431,870,520,266,736,384,229,880,686,785,386,266,292,371,518,48,413,988,251,141,123,495,86,753,898,637,817,881,619,425,955,953,617,213,572,860,711,566,40,161,531,378,3,862,735,604,687,574,863,311,917,921,768,466,818,56,532,66,712,450,597,800,29,343,641,832,415,415,785,700,583,578,821,168,516,338,355,555,841,586,601,795,127,50,429,898,222,345,711,542,755,927,473,111,593,491,366,871,354,113,258,580,66,182,125,382,761,511,698,548,328,793,471,386,245,206,105,975,629,790,648,375,377,192,49,538,426,223,607,797,319,721,289,760,624,165,887,166,580,992,915,465,637,338,542,198,310,381,562,396,527,113,517,481,733,838,546,345,521,467,927,143,866,799,551,163,347,739,89,365,824,866,63,302,43,900,314,484,738,726,811,585,86,279,744,187,954,34,209,264,547,604,185,176,871,902,980,141,867,159,413,120,302,238,151,544,123,69,287,232,22,221,17,800,351,63,618,27,236,86,762,856,247,304,257,467,941,385,235,765,242,915,574,383,445,989,775,72,767,780,374,895,616,880,25,615,783,575,974,517,594,310};
	cout << Solution::maxNumberOfApples(in1) << endl;
	return 0;
}
